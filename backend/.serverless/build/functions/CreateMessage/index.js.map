{
  "version": 3,
  "sources": ["../../../../functions/CreateMessage/index.js", "../../../../node_modules/uuid/dist-node/stringify.js", "../../../../node_modules/uuid/dist-node/rng.js", "../../../../node_modules/uuid/dist-node/native.js", "../../../../node_modules/uuid/dist-node/v4.js"],
  "sourcesContent": ["import { DynamoDBClient, PutItemCommand, QueryCommand, UpdateItemCommand} from \"@aws-sdk/client-dynamodb\";\nimport { unmarshall } from \"@aws-sdk/util-dynamodb\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst client = new DynamoDBClient({ region: \"eu-north-1\" });\n\nexport const handler = async (event) =>{\n    try{\n        const { username, text } = JSON.parse(event.body);\n\n        if(!username || !text){\n            return{\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: \"username och text kr\u00E4vs\"\n                })\n            };\n        }\n\n\n        const messageId = `MESSAGE#${uuidv4().toUpperCase().slice(0, 5)}`\n\n        const newMessage ={\n            pk: {S: \"Message\"},\n            sk: {S: messageId},\n            username: {S: username},\n            text: {S: text},\n            createdAt: {S: new Date().toISOString()},\n        }\n\n        const command = new PutItemCommand({\n            TableName: \"message-api\",\n            Item: newMessage\n        })\n\n        await client.send(command)\n        \n        return{\n            statusCode: 201,\n            body: JSON.stringify({\n                id: messageId,\n                username,\n                text,\n                createdAt: new Date().toISOString()\n            })\n        }\n\n        \n    } catch (error) {\n    console.error(\"Ett fel uppstod vid skapandet av message\", error);\n\n      return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Ett fel uppstod vid skapandet av message.\",\n        error: error.message,\n      }),\n    };\n    }\n}", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "import { randomFillSync } from 'node:crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n", "import { randomUUID } from 'node:crypto';\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction _v4(options, buf, offset) {\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    return _v4(options, buf, offset);\n}\nexport default v4;\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "handler", "__toCommonJS", "import_client_dynamodb", "import_util_dynamodb", "byteToHex", "i", "unsafeStringify", "arr", "offset", "import_node_crypto", "rnds8Pool", "poolPtr", "rng", "import_node_crypto", "native_default", "_v4", "options", "buf", "offset", "rnds", "rng", "i", "unsafeStringify", "v4", "native_default", "v4_default", "client", "handler", "event", "username", "text", "messageId", "v4_default", "newMessage", "command", "error"]
}
